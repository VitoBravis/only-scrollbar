extends ../../pug/layout

block meta
    title only-scrollbar

block content
    <main id="app"><h1 id="onlyscrollbar">OnlyScrollbar</h1>
    <p>Кастомный скроллбар, который позволяет дополнить стандартное поведение браузера и добавляет инерцию для увеличения плавности</p>
    <h2 id="">Установка</h2>
    <p>С помощью npm:</p>
    <pre><code class="bash language-bash">npm install only-scrollbar
    </code></pre>
    <h2 id="-1">Использование</h2>
    <p>Рекомендуется использование синтаксиса ES6, с применением <code>import</code> </p>
    <pre>
    code.ts.language-ts
        | import OnlyScrollbar from 'only-scrollbar';
        |
        | const scroll = new OnlyScrollbar(document.querySelector('.scroll-container'));
    </pre>
    <p>Контейнер, в котором будет проинициализирован скрол должен придерживаться тех же правил, что и обычный скрол-контейнер:</p>
    <ul>
    <li>Контейнер должен быть ограничен по высоте</li>
    <li>Значение <em>css</em>-правила <code>overflow</code> в данном случае необязательно, так как правило <code>overflow: auto</code> добавляется автоматически</li>
    </ul>
    <p>Конструктор класса <code>OnlyScrollbar</code> принимает до двух аргументов:</p>
    <table>
    <thead>
    <tr>
    <th style="text-align:center;">argument</th>
    <th style="text-align:center;">type</th>
    <th style="text-align:left;">description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td style="text-align:center;">element</td>
    <td style="text-align:center;"><code>HTMLHtmlElement | Element | Window | string | null | undefined</code></td>
    <td style="text-align:left;">HTML-элемент или css-селектор, по которому будет найден первый подходящий элемент. Является основным контейнером внутри которого происходит скрол и все расчеты</td>
    </tr>
    <tr>
    <td style="text-align:center;">element</td>
    <td style="text-align:center;"><code>OnlyScrollbarOptions | undefined</code></td>
    <td style="text-align:left;">Параметры инициализации</td>
    </tr>
    </tbody>
    </table>
    <h2 id="onlyscrollbaroptions">Возможные параметры инициализации (OnlyScrollbarOptions)</h2>
    <table>
    <thead>
    <tr>
    <th style="text-align:center;">parameter</th>
    <th style="text-align:center;">type</th>
    <th style="text-align:left;">description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td style="text-align:center;">damping</td>
    <td style="text-align:center;"><code>number</code></td>
    <td style="text-align:left;">Сила замедления инерции. Рекомендуется указывать значения в промежутке от 0 до 1. Значение по умолчанию 1</td>
    </tr>
    <tr>
    <td style="text-align:center;">eventContainer</td>
    <td style="text-align:center;"><code>HTMLHtmlElement | Element | Window | string</code></td>
    <td style="text-align:left;">HTML-элемент или css-селектор, по которому будет найден первый подходящий элемент. Является элементом, который будет обрабатывать события, предназначавшиеся скрол контейнеру. По умолчанию равен основному скрол контейнеру</td>
    </tr>
    <tr>
    <td style="text-align:center;">speed</td>
    <td style="text-align:center;"><code>number</code></td>
    <td style="text-align:left;">Модификатор скорости для колесика мыши. Значение по умолчанию 1</td>
    </tr>
    <tr>
    <td style="text-align:center;">anchors</td>
    <td style="text-align:center;">AnchorsOptions</td>
    <td style="text-align:left;">Дополнительные опции для ссылок-якорей. По умолчанию включена обработка нативных браузерных якорей через хэш в ссылках</td>
    </tr>
    <tr>
    <td style="text-align:center;">axis</td>
    <td style="text-align:center;"><code>Y</code> | <code>X</code></td>
    <td style="text-align:left;">Направление скрола. По умолчанию <code>Y</code></td>
    </tr>
    <tr>
    <td style="text-align:center;">listenAxis</td>
    <td style="text-align:center;"><code>Y</code> | <code>X</code></td>
    <td style="text-align:left;">Ось, которая будет прослушиваться обработчиком событий. По умолчанию совпадает со значением параметра <code>axis</code></td>
    </tr>
    </tbody>
    </table>
    <h2 id="-2">Возможные параметры для настройки ссылок-якорей</h2>
    <table>
    <thead>
    <tr>
    <th style="text-align:center;">parameter</th>
    <th style="text-align:center;">type</th>
    <th style="text-align:left;">description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td style="text-align:center;">offset</td>
    <td style="text-align:center;"><code>number</code></td>
    <td style="text-align:left;">Отступ от верхней границы экрана в пикселях. По умолчанию 0</td>
    </tr>
    <tr>
    <td style="text-align:center;">stopPropagation</td>
    <td style="text-align:center;"><code>boolean</code></td>
    <td style="text-align:left;">Предотвращает всплытие события <code>click</code>. По умолчанию <code>false</code></td>
    </tr>
    <tr>
    <td style="text-align:center;">active</td>
    <td style="text-align:center;"><code>boolean</code></td>
    <td style="text-align:left;">Определяет наличие обработки ссылок-якорей. По умолчанию <code>true</code></td>
    </tr>
    <tr>
    <td style="text-align:center;">root</td>
    <td style="text-align:center;"><code>HTMLElement</code></td>
    <td style="text-align:left;">Определяет элемент, внутри которого будет обрабатываться событие <code>click</code> по якорям. Полезно, если якоря находятся за пределами <code>scrollContainer</code>. По умолчанию является <code>scrollContainer</code></td>
    </tr>
    <tr>
    <td style="text-align:center;">type</td>
    <td style="text-align:center;"><code>native</code> | <code>custom</code></td>
    <td style="text-align:left;">Позволяет выбрать тип обработки якорей. По умолчанию <code>native</code></td>
    </tr>
    </tbody>
    </table>
    <p>В случае использования <code>type: 'custom'</code> необходимо использовать атрибуты <code>data-os-anchor</code> и <code>data-os-anchor-id</code>. Элементы с одинаковыми значениями таких атрибутов будут аналогично стандартному браузерному поведению с атрибутами <code>href</code> и <code>id</code></p>
    <pre>
    code.ts.language-ts
        | import OnlyScrollbar from 'only-scrollbar';
        |
        |  const scroll = new OnlyScrollbar('#scroll-container-id', {
        |      damping: 0.8,
        |      eventContainer: window,
        |      anchors: {
        |          type: 'custom',
        |          offset: 200
        |      }
        |  });
    </pre>
    //- <h2 id="-3">Пример использования:</h2>
    //- +example-scroll()
    <h2 id="api">API</h2>
    <p>Для обращения к свойствам и методам класса <code>OnlyScrollbar</code>, требуется создать экземпляр класса</p>
    <pre>
    code.ts.language-ts
        | import OnlyScrollbar from 'only-scrollbar';
        |
        | const scroll = new OnlyScrollbar('.scroll-container');
        | scroll.destroy();
    </pre>
    <ul>
    <li><p>Свойства</p>
    <ul>
    <li><a href="#onlyscrollbarattributes">OnlyScrollbar.Attributes</a></li>
    <li><a href="#onlyscrollbarclassnames">OnlyScrollbar.ClassNames</a></li>
    <li><a href="#onlyscrollbarevents">OnlyScrollbar.Events</a></li>
    <li><a href="#onlyscrollbarscrollcontainer">OnlyScrollbar.scrollContainer</a></li>
    <li><a href="#onlyscrollbareventcontainer">OnlyScrollbar.eventContainer</a></li>
    <li><a href="#onlyscrollbaroptions">OnlyScrollbar.options</a></li>
    <li><a href="#onlyscrollbarislocked">OnlyScrollbar.isLocked</a></li>
    <li><a href="#onlyscrollbarposition">OnlyScrollbar.position</a></li>
    <li><a href="#onlyscrollbardirection">OnlyScrollbar.direction</a></li>
    <li><a href="#onlyscrollbarisstart">OnlyScrollbar.isStart</a></li>
    <li><a href="#onlyscrollbarisend">OnlyScrollbar.isEnd</a></li>
    <li><a href="#onlyscrollbarisscrolling">OnlyScrollbar.isScrolling</a></li></ul></li>
    <li><p>Методы</p>
    <ul>
    <li><a href="#onlyscrollbarscrollto">OnlyScrollbar.scrollTo</a></li>
    <li><a href="#onlyscrollbarscrollintoview">OnlyScrollbar.scrollIntoView</a></li>
    <li><a href="#onlyscrollbarsetvalue">OnlyScrollbar.setValue</a></li>
    <li><a href="#onlyscrollbarstop">OnlyScrollbar.stop</a></li>
    <li><a href="#onlyscrollbarlock">OnlyScrollbar.lock</a></li>
    <li><a href="#onlyscrollbarunlock">OnlyScrollbar.unlock</a></li>
    <li><a href="#onlyscrollbaraddeventlistener">OnlyScrollbar.addEventListener</a></li>
    <li><a href="#onlyscrollbarremoveeventlistener">OnlyScrollbar.removeEventListener</a></li>
    <li><a href="#onlyscrollbardestroy">OnlyScrollbar.destroy</a></li></ul></li>
    <li><p>События</p>
    <ul>
    <li><a href="#osstart">os:start</a></li>
    <li><a href="#osstop">os:stop</a></li>
    <li><a href="#oschange">os:change</a></li>
    <li><a href="#osreachend">os:reachEnd</a></li>
    <li><a href="#osreachstart">os:reachStart</a></li>
    <li><a href="#oslock">os:lock</a></li>
    <li><a href="#osunlock">os:unlock</a></li></ul></li>
    </ul>
    <h3 id="-4">Свойства</h3>
    <h4 id="onlyscrollbarattributes">OnlyScrollbar.Attributes</h4>
    <p>Статичное поле класса. Содержит названия, используемых data-атрибутов</p>
    <h4 id="onlyscrollbarclassnames">OnlyScrollbar.СlassNames</h4>
    <p>Статичное поле класса. Содержит перечень основных <em>css</em>-классов, которые добавляются на <code>scrollContainer</code></p>
    <h4 id="onlyscrollbarevents">OnlyScrollbar.Events</h4>
    <p>Статичное поле класса. Содержит названия, кастомных js-событий</p>
    <h4 id="onlyscrollbarscrollcontainer">OnlyScrollbar.scrollContainer</h4>
    <ul>
    <li>Type: <code>HTMLElement</code></li>
    </ul>
    <p>Основной контейнер внутри которого происходит скрол и все основные расчеты</p>
    <blockquote>
    <p>Для того чтобы применить плавный скрол для всей страницы, в качестве контейнера достаточно указать объект <code>window</code> или <code>document.scrollingElement</code></p>
    <p>Объект <code>window</code> не может быть контейнером для скрола, но вместо него будет установлен <code>document.scrollingElement</code></p>
    </blockquote>
    <h4 id="onlyscrollbareventcontainer">OnlyScrollbar.eventContainer</h4>
    <ul>
    <li>Type: <code>HTMLElement | Window</code></li>
    </ul>
    <p>Элемент, на который будут применяться все события</p>
    <blockquote>
    <p>В отличие от <code>scrollContainer</code> может быть объектом <code>window</code>, но не <code>document.scrollingElement</code></p>
    </blockquote>
    <h4 id="onlyscrollbaroptions-1">OnlyScrollbar.options</h4>
    <p>Хранит параметры инициализации </p>
    <h4 id="onlyscrollbarislocked">OnlyScrollbar.isLocked</h4>
    <ul>
    <li>Type: <code>boolean</code></li>
    </ul>
    <p>Логическое значение, показывающее заблокирован ли скрол. </p>
    <p>Заблокированный скрол не позволяет выполняться событиям синхронизации и событиям для перерасчета позиции. Не блокирует скрол на touch-устройствах</p>
    <h4 id="onlyscrollbarposition">OnlyScrollbar.position</h4>
    <ul>
    <li>Type: <code>number</code></li>
    </ul>
    <p>Текущее значение позиции скрола. Значение поля <code>scrollTop</code> или <code>scrollLeft</code> в зависимости от направления скрола </p>
    <h4 id="onlyscrollbardirection">OnlyScrollbar.direction</h4>
    <ul>
    <li>Type: <code>Direction</code></li>
    </ul>
    <pre><code class="ts language-ts">type Direction = 1 | -1
    </code></pre>
    <p>Возвращает текущее направление скрола в числовом представлении: <code>1 = Down/Right</code>, <code>-1 = Up/Left</code>  </p>
    <h3 id="-5">Методы</h3>
    <h4 id="onlyscrollbarscrollto">OnlyScrollbar.scrollTo</h4>
    <pre><code class="ts language-ts">scroll.scrollTo(position: number): void
    </code></pre>
    <table>
    <thead>
    <tr>
    <th style="text-align:center;">argument</th>
    <th style="text-align:center;">type</th>
    <th style="text-align:left;">description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td style="text-align:center;"><code>position</code></td>
    <td style="text-align:center;"><code>number</code></td>
    <td style="text-align:left;">Целевая позиция скрола</td>
    </tr>
    </tbody>
    </table>
    <p>Плавный скрол до конкретной позиции, с применением стандартных расчетов для вычисления промежуточных значений</p>
    <p>Example:</p>
    <pre><code class="ts language-ts">scroll.scrollTo(600);
    </code></pre>
    <h4 id="onlyscrollbarscrollintoview">OnlyScrollbar.scrollIntoView</h4>
    <pre><code class="ts language-ts">scroll.scrollIntoView(element: HTMLElement, offset?: number): void
    </code></pre>
    <table>
    <thead>
    <tr>
    <th style="text-align:center;">argument</th>
    <th style="text-align:center;">type</th>
    <th style="text-align:left;">description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td style="text-align:center;"><code>element</code></td>
    <td style="text-align:center;"><code>HTMLElement</code></td>
    <td style="text-align:left;">Целевой HTML-элемент</td>
    </tr>
    <tr>
    <td style="text-align:center;"><code>offset</code></td>
    <td style="text-align:center;"><code>number</code></td>
    <td style="text-align:left;">Смещение скрола (По умолчанию = 0)</td>
    </tr>
    </tbody>
    </table>
    <p>Плавный скрол до переданного элемента с применением дополнительного отступа, если такой необходим</p>
    <p>Example:</p>
    <pre>
    code.ts.language-ts
        | const targetElement = document.querySelector('#target');
        | scroll.scrollIntoView(targetElement, 200);
    </pre>
    <h4 id="onlyscrollbarsetvalue">OnlyScrollbar.setValue</h4>
    <pre><code class="ts language-ts">scroll.setValue(value: number): void
    </code></pre>
    <table>
    <thead>
    <tr>
    <th style="text-align:center;">argument</th>
    <th style="text-align:center;">type</th>
    <th style="text-align:left;">description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td style="text-align:center;"><code>value</code></td>
    <td style="text-align:center;"><code>number</code></td>
    <td style="text-align:left;">Целевая позиция скрола</td>
    </tr>
    </tbody>
    </table>
    <p>Установка конкретного значения позиции скрола, без применения каких-либо анимаций</p>
    <p>Example:</p>
    <pre><code class="ts language-ts">scroll.setValue(600);
    </code></pre>
    <h4 id="onlyscrollbarstop">OnlyScrollbar.stop</h4>
    <pre><code class="ts language-ts">scroll.stop(): void
    </code></pre>
    <p>Останавливает скрол на текущей позиции</p>
    <h4 id="onlyscrollbarlock">OnlyScrollbar.lock</h4>
    <pre><code class="ts language-ts">scroll.lock(): void
    </code></pre>
    <p>Блокирует скрол</p>
    <p>Блокировка также вызовет метод <code>stop</code></p>
    <h4 id="onlyscrollbarunlock">OnlyScrollbar.unlock</h4>
    <pre><code class="ts language-ts">scroll.unlock(): void
    </code></pre>
    <p>Разблокирует скрол.</p>
    <h4 id="onlyscrollbaraddeventlistener">OnlyScrollbar.addEventListener</h4>
    <pre><code class="ts language-ts">scroll.addEventListener(type: OnlyScrollbarEvents, eventHandler: EventHandler, options: AddEventListenerOptions): void
    </code></pre>
    <table>
    <thead>
    <tr>
    <th style="text-align:center;">argument</th>
    <th style="text-align:center;">type</th>
    <th style="text-align:left;">description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td style="text-align:center;"><code>type</code></td>
    <td style="text-align:center;"><code>OnlyScrollbarEvents</code></td>
    <td style="text-align:left;">Название события. Возможно использовать стандарные события браузера или события OnlyScrollbar</td>
    </tr>
    <tr>
    <td style="text-align:center;"><code>eventHandler</code></td>
    <td style="text-align:center;"><code>EventHandler</code></td>
    <td style="text-align:left;">Функция обработчик события</td>
    </tr>
    <tr>
    <td style="text-align:center;"><code>options</code></td>
    <td style="text-align:center;"><code>AddEventListenerOptions</code></td>
    <td style="text-align:left;">Параметры обработчика события</td>
    </tr>
    </tbody>
    </table>
    <p>Добавляет обработчик события на eventContainer</p>
    <pre>
    code.ts.language-ts
        | const scrollEndHandler = () => {
        |     /* ... */
        | }
        | scroll.addEventListener('scrollEnd', scrollEndHandler, { once: true });
    </pre>
    <h4 id="onlyscrollbarremoveeventlistener">OnlyScrollbar.removeEventListener</h4>
    <pre><code class="ts language-ts">scroll.removeEventListener(type: OnlyScrollbarEvents, eventHandler: EventHandler): void
    </code></pre>
    <table>
    <thead>
    <tr>
    <th style="text-align:center;">argument</th>
    <th style="text-align:center;">type</th>
    <th style="text-align:left;">description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td style="text-align:center;"><code>type</code></td>
    <td style="text-align:center;"><code>OnlyScrollbarEvents</code></td>
    <td style="text-align:left;">Название события. Возможно использовать стандарные события браузера или события OnlyScrollbar</td>
    </tr>
    <tr>
    <td style="text-align:center;"><code>eventHandler</code></td>
    <td style="text-align:center;"><code>EventHandler</code></td>
    <td style="text-align:left;">Функция обработчик события</td>
    </tr>
    </tbody>
    </table>
    <p>Удаляет существующий обработчик события на eventContainer</p>
    <pre>
    code.ts.language-ts
        | const scrollEndHandler = () => {
        |     /* ... */
        | }
        | scroll.removeEventListener('scrollEnd', scrollEndHandler);
    </pre>
    <h4 id="onlyscrollbardestroy">OnlyScrollbar.destroy</h4>
    <pre><code class="ts language-ts">scroll.destroy(): void
    </code></pre>
    <p>Очистка событий, таймеров, классов и атрибутов</p>
    <h3 id="-6">События</h3>
    <h4 id="osstart">os:start</h4>
    <p>Начало процесса плавного скрола</p>
    <h4 id="osstop">os:stop</h4>
    <p>Завершение процесса плавного скрола</p>
    <h4 id="oschange">os:change</h4>
    <p>Изменение направления скрола </p>
    <h4 id="osreachend">os:reachEnd</h4>
    <p>Достижение нижней/правой границы скрол-контейнера</p>
    <h4 id="osreachstart">os:reachStart</h4>
    <p>Достижение верхней/левой границы скрол-контейнера</p>
    <h4 id="oslock">os:lock</h4>
    <p>Блокировка скрола</p>
    <h4 id="osunlock">os:unlock</h4>
    <p>Разблокировка скрола</p></main>
